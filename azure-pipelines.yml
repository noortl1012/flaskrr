# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- azure-pipelines

pool:
  vmImage: ubuntu-latest
stages:
  - stage: Build
    displayName: 'Build and Test'
    jobs:
    - job: BuildAndTest
      displayName: 'Build, Test, Lint, and Coverage'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self

        - script: |
            python -m venv venv
            source venv/bin/activate
            python -m pip install --upgrade pip
            pip install -r requirements.txt
          displayName: 'Setup Python environment'

        - script: |
            pip install flake8
            flake8
          displayName: 'Linting'

        - script: |
            pip install flask_sqlalchemy
            pip install pytest
            pytest tests/
          displayName: 'Run Tests'

        - script: |
            pip install coverage
            coverage run -m pytest 
            coverage report -m
            coverage xml
          displayName: 'Generate Code Coverage'

        - task: PublishCodeCoverageResults@1
          inputs:
            codeCoverageTool: Cobertura
            summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage.xml
          condition: succeededOrFailed()
    
        - task: ArchiveFiles@2
          inputs:
            rootFolderOrFile: '$(Build.SourcesDirectory)'
            includeRootFolder: true
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
            replaceExistingArchive: true
          
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'
        - task: Docker@2
          displayName: 'Build and Push Docker Image'
          inputs:
            command: buildAndPush
            containerRegistry: 'dock'  # Specify the name of your container registry connection
            repository: 'flaskr-tdd'
            Dockerfile: '**/Dockerfile'
            tags: '$(Build.BuildId)'